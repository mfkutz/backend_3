paths:
  /api/users/:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        "200":
          description: Los usuarios fueron obtenidos satisfactoriamente de la base de datos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de la conexion con la base de datos.

  /api/users/{uid}:
    get:
      summary: Obtiene un solo usuario a partir de su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario que se desea solicitar
          schema:
            $type: String
      responses:
        "200":
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
    put:
      summary: Actualiza un usuario a partir de su id
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario que se desea solicitar
          schema:
            $type: String

          "500":
            description: Error interno del servidor, usualmente generado por una query defectuosa o un fallo de la conexion con la base de datos.

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado por Mongo
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Correo del usuario, este campo es único
        password:
          type: String
          description: Contraseña hasheada del usuario
        role:
          type: String
          description: rol del usuario en la plataforma (user o admin)
        pets:
          type: ObjectId
          description: Aqui se sabrá si el usuario adoptó una mascota
      example:
        _id: ObjectId('672ca16702ceb4403aaf7d8a')
        first_name: Martin
        last_name: Kutzner
        email: info@gmail.com
        password: $2b$10$18nU70I6FvKVBF9c/d2CeuBo8af6V6Ozzf19RB.NvuW0vW.SYiIzS
        role: user
        pets: [colitas, pulgas]
  requestBodies:
    updateUser:
      type: object
      properties:
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: correo del usuario, este campo es único
        password:
          type: String
          description: Contraseña del usuario
      example:
        first_name: Marisol
        last_name: Cadena
        email: mari@correo.com
        password: abcd1234
